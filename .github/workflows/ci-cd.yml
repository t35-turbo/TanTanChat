name: CI/CD Pipeline

on:
  push:
    branches: [ main, cicd-dev ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: bun test 2>/dev/null || echo "No tests configured yet"

      - name: Type check
        run: bun run tsc --noEmit 2>/dev/null || echo "No TypeScript config found"

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm run test

      - name: Build application
        run: pnpm run build

  build-and-push:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/cicd-dev')
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - dockerfile: ./Dockerfile
            image: ${{ github.repository }}/backend
            context: .
          - dockerfile: ./client/Dockerfile
            image: ${{ github.repository }}/frontend
            context: .
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-gitops:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout GitOps repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}-gitops  # Create this repo and add GITOPS_TOKEN secret
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops
        continue-on-error: true

      - name: Update image tags
        run: |
          if [ ! -d "gitops" ]; then
            echo "⚠️  GitOps repository not found. Create '${{ github.repository }}-gitops' repo and add GITOPS_TOKEN secret to enable auto-deployment."
            exit 0
          fi
          cd gitops
          # Update backend image tag
          if [ -f "manifests/backend/deployment.yaml" ]; then
            sed -i "s|image: ghcr.io/${{ github.repository }}/backend:.*|image: ghcr.io/${{ github.repository }}/backend:main-${{ github.sha }}|g" manifests/backend/deployment.yaml
            echo "✅ Updated backend image tag"
          fi
          # Update frontend image tag  
          if [ -f "manifests/frontend/deployment.yaml" ]; then
            sed -i "s|image: ghcr.io/${{ github.repository }}/frontend:.*|image: ghcr.io/${{ github.repository }}/frontend:main-${{ github.sha }}|g" manifests/frontend/deployment.yaml
            echo "✅ Updated frontend image tag"
          fi

      - name: Commit and push changes
        run: |
          cd gitops
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update image tags to main-${{ github.sha }}" || exit 0
          git push
