version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cloneathon_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: valkey/valkey:7-alpine
    container_name: redis_cache
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      sh -c '
        if [ -n "$$REDIS_PASSWORD" ]; then
          redis-server --appendonly no --save "" --requirepass "$$REDIS_PASSWORD"
        else
          redis-server --appendonly no --save ""
        fi
      '
    healthcheck:
      test: >
        sh -c '
          if [ -n "$$REDIS_PASSWORD" ]; then
            redis-cli --no-auth-warning -a "$$REDIS_PASSWORD" ping
          else
            redis-cli ping
          fi
        '
      interval: 30s
      timeout: 10s
      retries: 3

  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bun_server
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:${REDIS_PORT}
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
      - BETTER_AUTH_URL=${BETTER_AUTH_URL}
    ports:
      - "${SERVER_PORT:-3000}:3001"
    volumes:
      - file_store:/app/file_store
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data:
  file_store: